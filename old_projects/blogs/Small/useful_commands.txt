Poszczególne etapy intalacji Django, budowy witryny i œrodowiska dla Django oraz tworzenia nowych projektów na tej platformie - wg tutorialu 'djangogirls.org/pl'.

<<Komendy i polecenia wydawane s¹ poprzez konsolê z poziomu folderu myDjango.>>

1. Za³o¿enie folderu roboczego (w Windows lub poleceniami w konsoli) - np. myDjango.

2. Utworzenie œrodowiska wirtualnego (oddziela œrodowiska Pythona/Django dla ka¿dego z projektów z osobna) - 'C:\U¿ytkownicy\Nazwa\myDjango> C:\Python36-32\python -m venv myvenv'
(myvenv - nazwa œrodowiska wirtualnego).

3. Uruchomienie œrodowiska wirtualnego - 'C:\U¿ytkownicy\Nazwa\djangogirls> myvenv\Scripts\activate' (ka¿dorazowo? - w konsoli widoczny prompt: '(myvenv) C:\U¿ytkownicy\Nazwa\myDjango>).

4. Instalacja Django - '(myvenv) ~$ pip install django==1.11.6'

5. Utworzenie projektu pod nazw¹ 'mysite' - 'django-admin.py startproject mysite .' 
django-admin jest skryptem, startproject komend¹; kropka na koñcu jest wa¿na - skrócona nazwa bie¿¹cego katalogu. 

6. Korekta strefy czasowej w pliku 'mysite/settings' - na 'Europe/Warsaw' oraz dopisanie na koñcu pliku zmiennej 'STATIC_ROOT = os.path.join(BASE_DIR, 'public', 'static')'

7. Utworzenie bazy danych dla witryny projektu (np. bloga) - 'python manage.py migrate'.

8. Uruchomienie serwera na którym dzia³a strona: (myvenv) ~/djangogirls$ python manage.py runserver;
w kolejnym kroku wklejenie do adresu przegl¹darki 'http://127.0.0.1:8000/'.

!!! Bardzo wa¿ne !!! Przy uruchamianiu œrodowiska produkcyjnego nale¿y w settings.py wy³¹czyæ DEBUG - zmieniæ wartoœæ na False!!!! Ma zwi¹zek równie¿ ze zmienn¹ "ALLOWED_HOSTS', która domyœlnie wynosi [].
9. Utworzenie osobnej aplikacji wewn¹trz projektu - '(myvenv) ~/myDjango> python manage.py startapp blog' (s³u¿y zachowaniu ³adu/porz¹dku).

10. Powiadomienie Django aby u¿ywa³ now¹ aplikacjê - w mysite/settings dopisanie do listy INSTALLED_APPS elementu 'blog'(na koñcu listy).

11. Tworzenie modelu wpisu na blogu - otwórz plik 'blog/models.py' i umieœæ kod:

		from django.db import models
		from django.utils import timezone


		class Post(models.Model):
    			author = models.ForeignKey('auth.User')
    			title = models.CharField(max_length=200)
    			text = models.TextField()
    			created_date = models.DateTimeField(default=timezone.now)
    			published_date = models.DateTimeField(blank=True, null=True)

    		def publish(self):
        		self.published_date = timezone.now()
        		self.save()

    		def __str__(self):
        		return self.title

12. Dodanie nowego modelu (wpis na blogu) do bazy danych:
	- 'python manage.py makemigrations blog' - Python tworzy za nas plik z migracjami (0001_initial.py)
	- ' python manage.py migrate blog' - wykonanie pliku skutkuje umieszczeniem modelu w bazie.

13.Wyedytowanie pliku 'blog/admin.py' w celu stworzenia dostêpu do panelu admina Django:
		
		from django.contrib import admin
		from models import Post
		
		admin.site.register(Post)

14. Uruchomienie panelu admin aby mieæ dostêp do modelu Post na serwerze - python manage.py runserver i wpisanie w oknie przegl¹darki adresu http://127.0.0.1:8000/admin/

15. Stworzenie konta administratora w celu zalogowania siê do panelu admin - w konsoli 'python manage.py createsuperuser'(login - 'licho59', email i has³o wg Gmail).

16.W celu unikniêcia problemów z czcionkami z poza zestawu ASCII w pierwszym lub drugim wierszu pliku '*.py' nale¿y umieœciæ: #-*-coding: utf-8 -*-    
 	